# shellcheck shell=bash
# TODO: Figure out how to init conda from 
source ~/miniforge3/etc/profile.d/conda.sh
conda activate rax


# TODO: Figure out how to get libc / cuda drivers to work with nixos.
# Basically the problem is that if I install rust through the flake, it will build everything 
# with the libc from nixos. This can be up to like gcc14,
# However, nvidia drivers are built with the system gcc. I think by default it is like 10.something. 
# I don't think it is possible to manager the NVIDIA drivers with nixos.
# Therefore, no matter what for the system to build I will need to ask the system what version of gcc it is using
# so that I can build rust with the same version. Either way this becomes annoying pretty quick because of desyncs
# and also I currently don't know how to tell rust what version of gcc to use.

# Like there are three things here 
# - there is rust build, 
# - there is nvidia TOOLKIT (on the computer) (which comes with like all of the library stuff in /usr/local/cuda-12.6/lib64/ like libcublas.so.12)
# - and there is nvidia DRIVER (on the GPU) which is specifically libcuda.so.1 or `/usr/lib/x86_64-linux-gnu/libcuda.so.560.35.05`

# The gcc version used to build all three of these needs to be the same otherwise we get problems.
# By default it just uses system gcc so shares same libc and stuff. But when you change one (the rust build)
# it causes problems.
# if ! has nix_direnv_version || ! nix_direnv_version 3.0.6; then
#   source_url "https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.6/direnvrc" "sha256-RYcUJaRMf8oF5LznDrlCXbkOQrywm0HDv1VjYGaJGdM="
# fi
# use flake
